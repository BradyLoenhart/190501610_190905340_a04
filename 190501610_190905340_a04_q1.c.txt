#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <ctype.h>
#include <stdbool.h>
#include <time.h>
#include <string.h>
#include <pthread.h>
#include <semaphore.h>

int readFile(char *fName);
void readSeq(char *fName, int max[rowNum][colNum]);
void bankersAlgorithm(int args[]);
int resourceRequest(int args[]);
int resourceRelease(int args[]);
void* threadRun();
bool safeyCheck(int *avail, int *alloc, int *need);
void state(int *avail, int *max, int *alloc, int *need);
int sumArr(int arr[], int i);
void getColNum(char *fName);
void runCMD();

int rowNum = -1;
int colNum = -1;

// Necessary data structure as laid out on pp.335 in course textbook (Operating System Concepts)
int *availPtr;
int *maxPtr;
int *allocPtr;
int *needPtr;


typedef struct thread {
    pthread_t process;
    unsigned int timeStart;
    char tid[4];
    int status;
    int returnVal;
} Thread;

int main(int argc, char *argv[]) {

}

int readFile(char *fName) {
    FILE *fpt = fopen("sample4_in.txt", 'r');
	if (!fpt) {
		printf("Error in opening file\n");
		return -1;
	}

	struct stat status;
	int counter = 0;
	fstat(fileno(fpt), &st);
	char *content = (char*) malloc(((int) st.st_size + 1) * sizeof(char));
	content[0] = '\0';

	while (!feof(fpt)) {
		counter += 1;
		char ln[100];
		if (fgets(line, 100, fpt) != NULL) {
			strncat(content, ln, strlen(ln));
		}

	}
	fclose(fpt);
	return counter;

}

void bankersAlgorithm(int args[]) {

}

void readSeq(char *fName, int max[rowNum][colNum]) {

	FILE *fpt = fopen("sample4_in.txt", 'r');

	if (!fpt) {
		printf("Error in opening file\n");
		exit(-1);
	}

	char *token;
	int i = 0;
	while (!feof(fpt)) {
		char ln[100];
		if (fgets(ln, 100, fpt) != NULL) {
			token = strtok(line, ",");
			printf("%s", ln);

			int j = 0;

			while (token != NULL) {
				max[i][j] = atoi(token);
				token = strtok(NULL, ",");
				j++;

			}
		}
		i++;
	}
	printf("\n");
	fclose(fpt);
}

void* threadRun() {

}

int resourceRelease(int args[]) {

}

bool safeyCheck(int *avail, int *alloc, int *need) {

}

int resourceRequest(int args[]) {

}

void getColNum(char *fName) {

}

void state(int *avail, int *max, int *alloc, int *need) {

}

int sumArr(int arr[], int i) {

}

void runCMD() {

}